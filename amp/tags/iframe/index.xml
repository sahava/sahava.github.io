<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iframe on Simo Ahava&#39;s blog</title>
    <link>https://www.simoahava.com/amp/tags/iframe/</link>
    <description>Recent content in iframe on Simo Ahava&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Feb 2020 09:00:38 +0200</lastBuildDate>
    
	<atom:link href="https://www.simoahava.com/amp/tags/iframe/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cookieless Tracking For Cross-site Iframes</title>
      <link>https://www.simoahava.com/amp/analytics/cookieless-tracking-cross-site-iframes/</link>
      <pubDate>Wed, 19 Feb 2020 09:00:38 +0200</pubDate>
      
      <guid>https://www.simoahava.com/amp/analytics/cookieless-tracking-cross-site-iframes/</guid>
      <description>Updated 15 April 2020: Fix the message forwarder to properly clone objects before they are passed to postMessage
 Here I am, back with &amp;lt;iframe&amp;gt; and cross-domain tracking. I&#39;ve published a couple of articles before on the topic, with my upgraded solution being the most recent one. These articles tackle the general problem of passing the Client ID from the parent to the &amp;lt;iframe&amp;gt;.
By doing so, the &amp;lt;iframe&amp;gt; can take the Client ID from the frame URL and create the _ga cookie in the &amp;lt;iframe&amp;gt;, allowing hits from the parent and the &amp;lt;iframe&amp;gt; to use the same Client ID.</description>
    </item>
    
    <item>
      <title>Tracking Cross-domain Iframes - Upgraded Solution</title>
      <link>https://www.simoahava.com/amp/analytics/tracking-cross-domain-iframes-upgraded-solution/</link>
      <pubDate>Tue, 04 Sep 2018 10:31:15 +0300</pubDate>
      
      <guid>https://www.simoahava.com/amp/analytics/tracking-cross-domain-iframes-upgraded-solution/</guid>
      <description>Some years ago, I wrote a post on how to track cross-domain iframes when using Google Tag Manager and Google Analytics. That solution relied on hitCallback to decorate the iframe, and now that I look back on it, it has its shortcomings.
For one, the older solution used hitCallback which, while being reliable in that Google Analytics has definitely loaded with the linker plugin when the method is called, doesn&#39;t take into account the possible race condition of the script running before the iframe has been loaded.</description>
    </item>
    
    <item>
      <title>Iframe Cross-Domain Tracking In Google Tag Manager</title>
      <link>https://www.simoahava.com/amp/analytics/iframe-cross-domain-tracking-in-google-tag-manager/</link>
      <pubDate>Wed, 04 Nov 2015 10:16:04 +0000</pubDate>
      
      <guid>https://www.simoahava.com/amp/analytics/iframe-cross-domain-tracking-in-google-tag-manager/</guid>
      <description>NOTE! This solution has been upgraded, and the new approach can be found here.
 If you&#39;re unfamiliar with the lingo, cross-domain tracking is a hack used by Google Analytics to circumvent the web browser&#39;s same-origin policy. Essentially, the policy dictates that browser cookies can only be shared with a parent domain and all its sub-domains. In other words, domainA.com and domainB.com do not share cookies.
Since Google Analytics calculates sessions and users by using a cookie, this is problematic.</description>
    </item>
    
  </channel>
</rss>