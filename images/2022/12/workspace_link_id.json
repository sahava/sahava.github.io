{
    "exportFormatVersion": 2,
    "exportTime": "2022-12-07 11:44:36",
    "containerVersion": {
        "path": "accounts/23019854/containers/8060344/versions/0",
        "accountId": "23019854",
        "containerId": "8060344",
        "containerVersionId": "0",
        "container": {
            "path": "accounts/23019854/containers/8060344",
            "accountId": "23019854",
            "containerId": "8060344",
            "name": "www.simoahava.com - NEW - web",
            "publicId": "GTM-PZ7GMV9",
            "usageContext": [
                "WEB"
            ],
            "fingerprint": "1622135989523",
            "tagManagerUrl": "https://tagmanager.google.com/#/container/accounts/23019854/containers/8060344/workspaces?apiLink=container",
            "features": {
                "supportUserPermissions": true,
                "supportEnvironments": true,
                "supportWorkspaces": true,
                "supportGtagConfigs": false,
                "supportBuiltInVariables": true,
                "supportClients": false,
                "supportFolders": true,
                "supportTags": true,
                "supportTemplates": true,
                "supportTriggers": true,
                "supportVariables": true,
                "supportVersions": true,
                "supportZones": true
            },
            "tagIds": [
                "GTM-PZ7GMV9"
            ]
        },
        "tag": [
            {
                "accountId": "23019854",
                "containerId": "8060344",
                "tagId": "1466",
                "name": "0 TRKKN - link_id - link tracking",
                "type": "html",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "html",
                        "value": "<script>\n/* ************************************ TRKKN PAGE_LINK_ID 2.0 ****************************************\n\nIdentify each and every clicked link by defining sections to your website. This tag writes the value of \na clicked section into the page_link_id key of the very first dataLayer object.\nThe tag also provides all necessary functions in order to set the link_id for a click event.\nAll settings can be found via window.trkknSettings.\nThe \n\nHOW TO SET UP\n-------------\nThis Custom HTML Tag needs to be triggered on all Pageviews. The following variables need to be set.\n\n\nDEFINITIONS\n-----------\nclickIdentifier:\n\tSyntax: [CSS SELECTOR]:[DYNAMIC VALUE]#[FIXED VALUE]\n\tFirst row matches first. You need to specify [FIXED VALUE] or [DYNAMIC VALUE] or both.\n\n\tFULL EXAMPLE --> RESULT\n\t\"div[id]\":\"id>class#section\" --> section > [id] > [class]\n\t\"div[id]\":\"id\" --> [id]\n\t\"nav\":\"#navigation\" --> navigation\n\n\tCSS SELECTOR: Divide the website template in different areas with the help of CSS Selectors. Start \n    with header, footer, sidebars, content area and navigation. Then divide the content area by modules.\n    https://www.w3schools.com/cssreF/css_selectors.php\n\n\tFIXED VALUE: Add a fixed value to the linkId. If you also use dynamic attribute values, the fixed \n    value gets attached ahead of the dynamic values with a > delimiter.\n\n\tDYNAMIC VALUE: Pulls the values of the specified element attributes that match the css selector. \n    You can specify more than one attribute with a > delimiter.\n\nclickSelector:\n\tDefines what is an actually clickable link. Because in general everything is clickable, but not \n    necessarily a link to another page. However, it is possible that e.g. DIV boxes are clickable and \n    act as proper link.\n\ncookieName: \n\tThe Name of the Cookie in order to track the page_link_id. Will also be written into a global trkknSettings variable.\n    \npageTemplate (optional):\n    Want to know what sections per page templates created to most clicks? If you want heatmap style \n    reports per sections, add a variable such as pageType.\n\npushListenerEvents:\n    In order to capture all link_ids accordingly, a mousedown (event: right_click) and keypress.keyCode=13\n    (event: keypress_enter) EventListener is set.\n      true: events will be pushed with gtm.element variables set in place, so you can easily work with it.\n      false: events will NOT be fired, but link_id is captured anyways.\n    \n******************************************************************************************************/\n(function() {\n  var gtm_link_id = {\n    clickIdentifier: {\n      // global rules that mostly fit these days\n      \"nav\": \"#navigation\",\n      \"footer\": \"#footer\",\n      \"header\": \"#header\",\n      \"main\": \"#content\"\n    },\n    clickSelector: \"a,input[type='submit'],button\",\n    cookieName: \"gtm_link_id\",\n    pageTemplate: \"\", // just put \"\" if you dont want to use this\n    pushListenerEvents: true\n  };\n\n  /* ************************ DO NOT CHANGE ANYTHING BELOW THIS LINE ********************************* */\n  function getLinkId(e, t, lid) {\n    //check if mousedown or keypress (enter = 13)\n    if (t === \"right_click\" || (t === \"keypress_enter\" && e.keyCode == 13)) {\n      //fire an event, so gtm.element is filled when mousedown/enter event happens\n      if (gtm_link_id.pushListenerEvents) {\n        window.dataLayer.push({\n          \"event\": t,\n          \"gtm.element\": e.target || \"\",\n          \"gtm.elementClasses\": e.target.className || \"\",\n          \"gtm.elementId\": e.target.id || \"\",\n          \"gtm.elementTarget\": e.target.target || e.target.formTarget || \"\",\n          \"gtm.elementUrl\": e.target.href || \"\"\n        });\n      }\n      var clickedParent = window.trkknSettings.closestElement(e.target, Object.keys(lid.clickIdentifier));\n      var clickedElmnt = window.trkknSettings.closestElement(e.target, lid.clickSelector);\n      if (clickedParent !== null && clickedElmnt !== null) {\n        var attributesToWrite = window.trkknSettings.buildAttributesString(clickedParent, lid.clickIdentifier);\n        if (attributesToWrite !== \"\") {\n          document.cookie = lid.cookieName + \"=\" + attributesToWrite + \"###\" + lid.pageTemplate + \";path=/;Secure\";\n        }\n      }\n    }\n  }\n  //set the listeners\n  function trkLinkId(lid) {\n    window.addEventListener('mousedown', function(e) {\n      getLinkId(e, \"right_click\", lid)\n    }, false);\n    //keypress important for forms that trigger new pageloads\n    window.addEventListener('keypress', function(e) {\n      getLinkId(e, \"keypress_enter\", lid)\n    }, false);\n    //set the pageTemplate in a cookie first, in case the user clicks reload, back_forward, etc.\n    setTimeout(function() {\n      document.cookie = lid.cookieName + \"=###\" + lid.pageTemplate + \";path=/;Secure\"\n    }, 2000);\n  }\n  //you'll need this if you want to track link_id for events aswell\n  window.trkknSettings = window.trkknSettings || {};\n  window.trkknSettings.linkIdSettings = gtm_link_id;\n  //fire the listeners to set the cookie\n  trkLinkId(gtm_link_id);\n\n  //get the closest specified element - set global so it can used for events aswell\n  window.trkknSettings.closestElement = function(elem, selector) {\n    // Element.matches() polyfill\n    if (!Element.prototype.matches) {\n      Element.prototype.matches =\n        Element.prototype.matchesSelector ||\n        Element.prototype.mozMatchesSelector ||\n        Element.prototype.msMatchesSelector ||\n        Element.prototype.oMatchesSelector ||\n        Element.prototype.webkitMatchesSelector ||\n        function(s) {\n          var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length;\n          while (--i >= 0 && matches.item(i) !== this) {}\n          return i > -1;\n        };\n    }\n    // Get the closest matching element\n    for (; elem && elem !== document; elem = elem.parentNode) {\n      if (elem.matches(selector)) {\n        return elem;\n      }\n    }\n    //nothing found\n    return null;\n  };\n\n  //build link_id string - set global so it can used for events aswell\n  window.trkknSettings.buildAttributesString = function(elem, clickIdentifier) {\n    var clickIdentifier_value = \"\";\n    for (var key in clickIdentifier) {\n      if (elem.matches(key)) {\n        clickIdentifier_value = clickIdentifier[key];\n        break;\n      }\n    }\n    var result = \"\";\n    var cisplit = clickIdentifier_value.split(\"#\");\n    var cidentifier = cisplit[0];\n    if (cidentifier !== \"\") {\n      var alsplit = cidentifier.split(\">\");\n\n      for (j = 0; j < alsplit.length; j++) {\n        var elementAttribute = elem.getAttribute(alsplit[j]);\n        if (elementAttribute !== null) {\n          if (result !== \"\") {\n            result += \" > \";\n          }\n          result += elementAttribute;\n        }\n      }\n      if (cisplit.length === 2) {\n        result = cisplit[1] + \" > \" + result;\n      }\n      return result;\n    } else {\n      return cisplit[1];\n    }\n  };\n})();\n</script>"
                    },
                    {
                        "type": "BOOLEAN",
                        "key": "supportDocumentWrite",
                        "value": "false"
                    }
                ],
                "fingerprint": "1670413269631",
                "firingTriggerId": [
                    "2147479553"
                ],
                "tagFiringOption": "ONCE_PER_EVENT",
                "monitoringMetadata": {
                    "type": "MAP"
                },
                "consentSettings": {
                    "consentStatus": "NOT_SET"
                }
            }
        ],
        "variable": [
            {
                "accountId": "23019854",
                "containerId": "8060344",
                "variableId": "1467",
                "name": "link_id_events_cJS",
                "type": "jsm",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "javascript",
                        "value": "function() {\n  /* ********************  TRRKN LINK_ID EVENT VARIABLE ***********************\n  ignoredEvents:\n    Sometimes, there is no need to add the link_id to events, so\n    makes sense to ignore them. A simple regex does the job.\n  eventIdentifier: \n\tIt's usually the regular Event variable, which is already set per default.\n   ************************************************************************* */\n  var ignoredEvents = /corewebvitals/i;\n  var eventIdentifier = {{Event}};\n  /* ********************* DO NOT CHANGE ANYTHING BELOW ********************* */\n  try {\n    var gtmLid = window.trkknSettings.linkIdSettings;\n    var clickedGTMElmnt = {{Click Element}};\n    var clickedParent = window.trkknSettings.closestElement(clickedGTMElmnt, Object.keys(gtmLid.clickIdentifier));\n    if (clickedParent !== null && eventIdentifier.match(ignoredEvents) === null) {\n      return window.trkknSettings.buildAttributesString(clickedParent, gtmLid.clickIdentifier);\n    } else {\n      return \"(not set)\";\n    }\n  } catch (e) {\n    return \"(not set)\";\n  }\n}"
                    }
                ],
                "fingerprint": "1670413353440",
                "formatValue": {}
            },
            {
                "accountId": "23019854",
                "containerId": "8060344",
                "variableId": "1468",
                "name": "link_id_page_cJS",
                "type": "jsm",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "javascript",
                        "value": "function() {\n  /* ********************  TRRKN LINK_ID PAGE VARIABLE ************************\n  cookieName:\n    The name of the Cookie, which is set in the link_id Tag\n  *************************************************************************** */\n  var cookieName = \"gtm_link_id\";\n\n  /* ********************* DO NOT CHANGE ANYTHING BELOW ********************* */\n  window.trkknSettings = window.trkknSettings || {};\n  if (typeof window.trkknSettings.page_link_id === \"undefined\") {\n    var navType = getNavType();\n    var cookieValue = cc(cookieName) || \"\";\n    var cookieClickId = cookieValue.split(\"###\")[0];\n    var cookieTemplate = cookieValue.split(\"###\")[1];\n    var hostName = window.location.hostname;\n    var lidResult;\n    //user clicked forward/backward/reload button\n    if (navType.match(/(error|navigate)/gi) === null) {\n      document.cookie = \"universalClickId\" + \"=;max-age=-99999999;path=/;\";\n      lidResult = navType;\n      if (typeof cookieTemplate !== \"undefined\") {\n        window.trkknSettings.page_link_id_template = cookieTemplate;\n      }\n      //user landed on the domain, no cookie and document.referrer domain is different.\n    } else if (document.referrer.indexOf(hostName) === -1 && cookieClickId === \"\") {\n      lidResult = \"(landing page)\";\n      // user has been on the domain before, but the cookie is missing\n    } else if (document.referrer.indexOf(hostName) !== -1 && cookieClickId === \"\") {\n      lidResult = \"(cookie missing)\" + navType;\n      if (typeof cookieTemplate !== \"undefined\") {\n        window.trkknSettings.page_link_id_template = cookieTemplate;\n      }\n      // there is a cookie, write it to the dataLayer, but check if empty first\n    } else {\n      if (typeof cookieTemplate !== \"undefined\") {\n        window.trkknSettings.page_link_id_template = cookieTemplate;\n      }\n      lidResult = cookieClickId;\n      // check if referrer is empty\n      lidResult = document.referrer === \"\" ? lidResult + \"(no referrer)\" + navType : lidResult;\n    }\n    window.trkknSettings.page_link_id = lidResult;\n    window.trkknSettings.page_link_id_cookie = cookieValue;\n    //delete cookie\n    document.cookie = cookieName + \"=;max-age=-99999999;path=/;\";\n    return lidResult;\n  } else {\n    return window.trkknSettings.page_link_id\n  }\n  //get the nav type\n  function getNavType() {\n    try {\n      var pType = performance.getEntriesByType(\"navigation\")[0].type;\n      return \"(\" + pType + \")\";\n    } catch (e) {\n      return \"(error)\";\n    }\n  }\n  //get the cookie value\n  function cc(k) {\n    return (document.cookie.match('(^|; )' + k + '=([^;]*)') || 0)[2]\n  };\n}"
                    }
                ],
                "fingerprint": "1670413403687",
                "formatValue": {}
            },
            {
                "accountId": "23019854",
                "containerId": "8060344",
                "variableId": "1469",
                "name": "link_id_page_template_var",
                "type": "j",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "name",
                        "value": "trkknSettings.page_link_id_template"
                    }
                ],
                "fingerprint": "1670412786978",
                "formatValue": {}
            }
        ],
        "builtInVariable": [
            {
                "accountId": "23019854",
                "containerId": "8060344",
                "type": "EVENT",
                "name": "Event"
            },
            {
                "accountId": "23019854",
                "containerId": "8060344",
                "type": "CLICK_ELEMENT",
                "name": "Click Element"
            }
        ],
        "fingerprint": "1670413476016",
        "tagManagerUrl": "https://tagmanager.google.com/#/versions/accounts/23019854/containers/8060344/versions/0?apiLink=version"
    }
}