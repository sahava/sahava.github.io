<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data model on Simo Ahava&#39;s blog</title>
    <link>https://www.simoahava.com/tags/data-model/</link>
    <description>Recent content in data model on Simo Ahava&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Nov 2018 12:09:33 +0200</lastBuildDate>
    
	<atom:link href="https://www.simoahava.com/tags/data-model/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Persist Google Tag Manager&#39;s dataLayer Across Pages</title>
      <link>https://www.simoahava.com/analytics/persist-datalayer-across-pages/</link>
      <pubDate>Mon, 19 Nov 2018 12:09:33 +0200</pubDate>
      
      <guid>https://www.simoahava.com/analytics/persist-datalayer-across-pages/</guid>
      <description>Four years ago, I wrote an article on how to persist GTM&#39;s dataLayer from page to page. Unfortunately, the solution was a bit clumsy, requiring you to give specific commands for the interactions, which made it really unwieldy in the long run. Google Tag Manager still doesn&#39;t offer us a native way to persist the dataLayer array or its internal data model from one page to the other, so I thought it was about time I revisit this idea.</description>
    </item>
    
    <item>
      <title>#GTMTips: Two Simple Data Model Tricks</title>
      <link>https://www.simoahava.com/analytics/two-simple-data-model-tricks/</link>
      <pubDate>Fri, 03 Aug 2018 09:46:04 +0300</pubDate>
      
      <guid>https://www.simoahava.com/analytics/two-simple-data-model-tricks/</guid>
      <description>One of the more difficult concepts in Google Tag Manager is the data model. In essence, the data model is what Google Tag Manager uses to populate the Data Layer variable. You might be tempted to think that it&#39;s the same thing as the dataLayer array, but it&#39;s not.
The data model is a representation of the keys and values you push into dataLayer. Whenever you push any key into dataLayer, GTM grabs this key and updates the corresponding key in its data model with the new value, or in the case of objects and arrays merges the old and the new value together.</description>
    </item>
    
    <item>
      <title>#GTMTips: Data Layer Variable Versions Explained</title>
      <link>https://www.simoahava.com/gtm-tips/data-layer-variable-versions-explained/</link>
      <pubDate>Tue, 19 Jan 2016 11:59:35 +0000</pubDate>
      
      <guid>https://www.simoahava.com/gtm-tips/data-layer-variable-versions-explained/</guid>
      <description>Google Tag Manager&amp;lsquo;s Data Layer is something I&#39;ve touched upon in pretty much all of my articles. It&#39;s such an integral part of what makes a tag management solution great and applicable to a host of business scenarios. I&#39;ve also talked at length about the internal data model of Google Tag Manager, and this #GTMTips post is very much related to this rather murky concept.
In this post, we&#39;ll go over the Data Layer Variable Version selection, and I&#39;ll try to explain just what this selector does.</description>
    </item>
    
    <item>
      <title>Google Tag Manager&#39;s Data Model</title>
      <link>https://www.simoahava.com/analytics/google-tag-manager-data-model/</link>
      <pubDate>Sat, 20 Sep 2014 10:40:55 +0000</pubDate>
      
      <guid>https://www.simoahava.com/analytics/google-tag-manager-data-model/</guid>
      <description>It&#39;s time for MeasureCamp again! As before, I want to write an accompanying post for my session, since there&#39;s always so much more to say than the time slot allows for. So, the topic of this article is the data model used by Google Tag Manager to process digital data in your data layer.
This post also picks up where I left in my previous foray into the data layer. However, where the first article aimed to be generic (since the data layer should be generic), this post will look at how GTM uses the information in the generic data layer, and how it processes this information to work with the proprietary features of the tool.</description>
    </item>
    
  </channel>
</rss>